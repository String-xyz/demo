name: deploy dev
permissions:
  id-token: write
  contents: read
on:
  push:
    branches: [develop]
jobs:
  deploy:
    environment:
      name: development
      url: https://demo.dev.string.xyz

    name: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: setup nodejs
        uses: actions/setup-node@v2.1.3
        with:
          node-version: 18.0.0

      - name: generate env
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_VITE_ENV: development
          envkey_VITE_IPFS_GATEWAY: ${{ secrets.IPFS_GATEWAY }}
          envkey_VITE_IPFS_CID: ${{ secrets.IPFS_CID }}
          envkey_VITE_STRING_USE_LOCAL: false
          envkey_VITE_STRING_LOCAL_API_KEY: '' # not needed for cloud deployment
          envkey_VITE_STRING_SBOX_API_KEY: ${{ secrets.SBOX_API_KEY }}
          envkey_VITE_STRING_PROD_API_KEY: ${{ secrets.PROD_API_KEY }}
          filename: .env
          directory: ./

      - name: install deps
        run: |
          yarn
          yarn run build

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.6.1
        with:
          aws-region: us-west-2
          role-to-assume: ${{ secrets.ASSUME_ROLE }}

      - name: login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: build, tag and push to Amazon ECR
        id: image-builder
        env:
          ECR_REPO: ${{ secrets.AWS_ACCT }}.dkr.ecr.us-west-2.amazonaws.com
          SERVICE: demo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REPO/$SERVICE:$IMAGE_TAG .
          docker push $ECR_REPO/$SERVICE:$IMAGE_TAG
          echo "image=$ECR_REPO/$SERVICE:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: get latest task definition
        run: |
          aws ecs describe-task-definition --task-definition demo --query taskDefinition > task-definition.json

      - name: update task definition
        id: task
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: demo
          image: ${{ steps.image-builder.outputs.image }}

      - name: deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task.outputs.task-definition }}
          cluster: web-app
          service: demo
          wait-for-service-stability: true
